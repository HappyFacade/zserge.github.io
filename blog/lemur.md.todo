title: Lemur - a lovely monkey (UI automation)
description: simple UI automation and testing tool for android written in Lua
keywords: android, uitest, uiautomator, ui automation, monkey, monkeyrunner, lua, adb, lemur
date: 2014-02-04

# <% title %>

Long time ago when Android 4.1 SDK was released (SDK tools revision 21) it got
a new feature - [UI testing][1]. The idea was to provide a tool for blackbox
testing, e.g. to see the UI is changed correctly in response to some user interaction
without knowing the internals of the app.

The deployment of such tests was much faster comparing to normal Android
testing procedure. But at a closer look the tests were absolutely broken.

First, the deployment procedure is semi-automatic, user has to do some command
line actions to install test jar to the device and run it. Next, it was
reported (and I saw it on my 4.1 phone) [the scrolling was not working as
expected][2]. Also, tests was terribly slow to run, it could took like half a
minute to wait until some queries finish.

With all those disadvantages it's no surprise the UI testing is now dead and
there was no commits in those parts of Android for more than a year.

## can it be done better?

Definitely yes. First, let's take [Lua][4] as a small nice language with clean
syntax that everyone can learn in half an hour. Next, make a wrapper around
user interaction commands like tapping, swiping, sending key events etc. And
find a way to discover what's on screen right now.

Here's an example of how it can be used:

	lemur.home() -- simulare pressing "Home" button
	lemur.launch('com.example/.MainActivity') -- start new activity

	local btn = lemur.find('Add account') -- look for a button with text
	if btn then
		btn.click() -- simulate clicking on the button
	else
		print('Button not found!')
	end

## better queries

Here's how UI testing toolkit suggested to find a view inside another view:

	UiObject video = videos.getChildByText(new UiSelector()
			.className("android.widget.LinearLayout"), "Cute Baby Laughing");

That means find a LinearLayout, and find a view inside with the given text.
With lemur you can do:

	local video = lemur.find('./Linear/', 'Cute Baby Laughing')

That needs some explaination. First, `lemur.find()` takes multiple arguments.
That's how nested queries are done. Now, every query may start with a dot if
you want to query by class name or by a hash sign if you want to query by
content description. Starting with other characters would mean querying for
text, the most common case.

Also, query can be wrapped into slashes, then it will be treated as a regex, so
you can use `./Linear/` instead of `.android.widget.LinearLayout`.

You can use numbers as parts of the query as well, that would mean use the "n-th" child, like:

	local btn = lemur.find('./Button/', 4) -- take the fourth button found

## what's inside?

Yeah, that's the dark side of the lemur.

Lemur is a shell script that contains prebuilt Lua binaries (for now only armeabi
is supported). To run UI scripts you shall do:

	$ lemur.sh myscript.lua

At this point lemur.sh unpacks the Lua interpreter, pushes it via ADB, pushes
you UI script, and uses ADB shell to run your script inside the interpreter.

It looks pretty solid to the user - no compiling, no manual deployment - you
just execute your tests on the device.

But what's happening on the device is shrouded in mystery.

First, `uiautomator` is our biggest friend and biggest enemy. It turns out that 
`uiautomator` binds to the accessibility bridge to get information about
current on-screen layout. It can also dump the layout as an XML file. That's
the feature we will use.

When user runs `lemur.find()` - lemur asks uiautomator to make an XML file with
the information about current nodes visible, parses that XML and runs a query
against it.

What kind of information the XML contains? Here's an example:

	<node index="0" text="" class="android.widget.LinearLayout"
		package="com.android.vending" content-desc="" checkable="false" checked="false"
		clickable="false" enabled="true" focusable="false" focused="false"
		scrollable="false" long-clickable="false" password="false" selected="false"
		bounds="[49,36][130,61]">
			<node index="0" text="Play Store" class="android.widget.TextView"
				package="com.android.vending" content-desc="" checkable="false"
				checked="false" clickable="false" enabled="true" focusable="false"
				focused="false" scrollable="false" long-clickable="false" password="false"
				selected="false" bounds="[49,36][130,61]" />
	</node>

That's a snippet of the view hierarchy from the Play Store. You can see here
class names, package names, text shown inside the view and other properties.
The most interesting one is "bounds" - the coordinates of the top-left and
bottom-right points of the view rectangle.

So, don't expect much from UI testing. It's only about where views are located
and what user can do to them.

The bad thing is the `uiautomator` sources have a one second delay to establish
the connection to the bridge. That may explain why it takes so long to dump
view hierarchy to the file. Probably, holding one connection and re-using it
may help.

Retrieving other information like DPI or screen size I plan to do via parsing
the output of getprop or dumpsys. That's not the best solution, but should work
in most cases.

## simulating user actions

That's another tricky part. I don't use `uiautomator` for this, since it's
known to have issues. Instead I use `input` command to simulate simple user
events like pressing keys, sending text, tapping or swiping:

	input key HOME
	input text Hello
	input tap 160 160
	input swipe 160 160 320 160

Once I needed to send text into the EditText views I wanted to clear the
existing text if any. I could send the 'DEL' key repreatedly, but I copied the
behavior of the UI testing framework: simulate long click to select text and
press 'DEL' once.

But long clicks are not possible with `input` command. So, every time lemur
needs to simulate a long click it generates a MonkeyRunner script and executes
it. I hope MonkeyRunner syntax won't change much anymore (though it's not a
public API).

## Conclusion

I have no idea if anyone needs a UI automation/testing tool at all, so for now
lemur is my pet project. I used it to fulfil long forms during android app
development. That worked greately - instead of manually typing the text on
software keyboard it took a couple of seconds to fill in everything. Also I
used it to get to the deeply hidden fragment - I was doing "ant debug install
&& lemur.sh navigate.lua" and after both processes are done my test phone was
on the right screen I was working on.

Probably, lemur (as well as uiautomatorviewer) may help debugging some tricky
situations with layouts designing.

Also, if add the capability to sniff the log output - then lemur may also check
the correct UI actions cause the correct log output (which means the correct
methods were called with correct parameters)

Yes, it still has all the weaknesss of UI testing - problems with localized
apps, problems with webviews etc. So, before it goes too far I'd like to know
if anyone needs a UI testing/automation tool like this, and if so - what
features to you expect? Thanks!

Posted on <% date %> <% rss %>

<% disqus %>


[1]: http://developer.android.com/tools/testing/testing_ui.html
[2]: http://stackoverflow.com/questions/15858734/uiscrollable-not-work-in-android-uiautomator
[3]: http://blog.bettersoftwaretesting.com/2013/03/android-test-automation-getting-to-grips-with-ui-automator/
[4]: http://www.lua.org/

